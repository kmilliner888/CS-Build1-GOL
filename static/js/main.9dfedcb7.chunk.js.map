{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","direction","App","useState","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","rando","length","r","Math","floor","random","indexOf","console","log","style","backgroundColor","width","display","flexDirection","justifyContent","color","textAlign","padding","margin","textDecoration","href","onClick","randoGrid","id","height","className","gridTemplateColumns","paddingBottom","map","col","key","newGrid","undefined","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9dfedcb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useCallback, useRef} from 'react';\nimport produce, { setAutoFreeze } from 'immer';\nimport logo from './logo.svg';\nimport './App.css';\n\n/* setting the rows and columns for the grid */\nconst rowCount = 25;\nconst columnCount = 25;\n\n/* Location of all the neighbors for cell, streamlined */\nconst direction = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\n\nfunction App() {\n  /* Setting state for grid */\n  const [grid, setGrid] = useState(()=> {\n    const rows = [];\n    for(let i = 0; i< rowCount; i++) {\n      rows.push(Array.from(Array(columnCount), ()=> 0));\n    }\n    return rows;\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current= running\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid(g => { /* g is the current grid */\n      return produce(g, gridCopy => { /* This is going through every cell in the grid */\n        for (let i = 0; i < rowCount; i++) {\n          for (let j = 0; j< columnCount; j++) {\n            let neighbors = 0;\n            /* This is going to tell us for each cell, how many neighboring cells are there */\n            direction.forEach(([x, y]) => {\n              const newI= i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < rowCount && newJ >= 0 && newJ <columnCount) { /* This will check to make sure we don't go out of bounds, and that there are neighbors */\n                neighbors += g[newI][newJ]\n              }\n            })\n            /* RULE #1 and RULE #2 */\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0; /* KILLS IT */\n            } else if (g[i][j] === 0 && neighbors ===3) {\n              gridCopy[i][j] = 1;   /*RULE #3, COMES ALIVE*/\n            } /*This part is mutating the gridCopy, and produce is creating a new grid, which updates the setGrid value */\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 100);\n  }, [])\n\n  let rando = [];\n  while(rando.length <10) {\n    let r = Math.floor(Math.random()*10) +1;\n    if(rando.indexOf(r)===-1) rando.push(r);\n  }\n  console.log(rando)\n\n  return (\n    <>\n      <div style={{backgroundColor: \"black\", width: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-evenly\",color: \"white\", textAlign: \"center\"}}>\n            <h1 style={{width: \"100%\"}}>Game of Life</h1>\n            <p style={{width: \"100%\", padding: \"0px\", margin: \"0px 0px 20px 0px\"}}>Select a grouping of cells then click START.<br></br>Once it stops, click on nearby cells to watch it keep growing,<br></br> or click STOP to start over.<br></br><a style={{textDecoration: \"none\", color: \"yellow\"}} href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Click here for full description and rules.</a></p>\n\n\n        <div style={{padding: \"0px 0px 20px 0px\"}}>\n          <button onClick={()=> {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation()\n            }\n          /* BUTTON: Is it running? If so, show Stop. If not, show Start */\n          }}>{running ? 'STOP': 'START'}\n          </button>\n        </div>\n      </div>\n      <div style={{backgroundColor: \"black\", width: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-evenly\",color: \"white\", textAlign: \"center\"}}>\n          <div style={{padding: \"0px 0px 20px 0px\"}}>\n\n            <button onClick={() => {\n                let randoGrid = produce(grid, gridCopy => {\n                  gridCopy[rando[0]][rando[0]] = 'purple'\n                })\n                setGrid(randoGrid)\n              }}>Random</button>\n          </div>\n          </div>\n      <div id=\"grid container\" style={{width: \"100%\",\n          height: \"auto\"}}>\n        <div className=\"App\" style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${columnCount}, 20px)`,\n          backgroundColor: \"black\", paddingBottom: \"100px\"}}>\n          {grid.map((rows, i) =>\n            rows.map((col, j) =>\n              <div\n              key={`${i}-${j}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                })\n                // const randomGrid = produce(grid, gridCopy => {\n                //   gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                // })\n                setGrid(newGrid)\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][j] ? 'purple' : undefined,\n                border: '1px solid grey'\n              }}/>\n            ))}\n        </div>\n        {/* <div style={{backgroundColor: \"black\", width: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-evenly\",color: \"white\", textAlign: \"center\"}}>\n          <div style={{padding: \"0px 0px 20px 0px\"}}>\n\n            <button onClick={() => {\n                let randoGrid = produce(grid, gridCopy => {\n                  gridCopy[rando[0]][rando[0]] = 'purple'\n                })\n                setGrid(randoGrid)\n              }}>Random</button>\n          </div>\n        </div> */}\n\n          {/* <div className=\"App\" style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${columnCount}, 20px)`,\n            backgroundColor: \"black\", paddingBottom: \"100px\"}}>\n            {grid.map((rows, i) =>\n              rows.map((col, j) =>\n                <div\n                key={`${i}-${j}`}\n                style={{\n                  width: 20,\n                  height: 20,\n                  // backgroundColor: grid[Math.floor(rando[0])][Math.floor(rando[0])] = \"purple\",\n                  border: '1px solid grey'\n                }}/>\n              ))}\n          </div> */}\n        </div>\n\n    </>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}